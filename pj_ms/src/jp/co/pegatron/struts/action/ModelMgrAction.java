/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package jp.co.pegatron.struts.action;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;
import java.util.List;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import jp.co.pegatron.common.FileSvc;
import jp.co.pegatron.domain.model.Bulletin;
import jp.co.pegatron.domain.model.Model;
import jp.co.pegatron.service.BulletinSvc;
import jp.co.pegatron.service.ModelSvc;
import jp.co.pegatron.struts.form.BulletinForm;
import jp.co.pegatron.struts.form.ModelForm;

import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import com.ssoserver.common.pagination.Pagination;
import com.ssoserver.utils.GetPropMessage;

/**
 * MyEclipse Struts Creation date: 03-01-2010
 * 
 * XDoclet definition:
 * 
 * @struts.action validate="true"
 */
public class ModelMgrAction extends Action {
	/*
	 * Generated Methods
	 */

	/**
	 * Method execute
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		String task = request.getParameter("task");
		if ("view".equals(task)) {
			Pagination pagination = new Pagination();
			String scope = request.getParameter("scope");
			List modelList = null;
			String viewHQLStr;
			if ("all".equals(scope)) {
				viewHQLStr = GetPropMessage.getUTF8Message("allModel");
			} else {
				viewHQLStr = GetPropMessage.getUTF8Message("allModel");
			}
			modelList = pagination.execute(ModelSvc.getInstance(), viewHQLStr,
					request, response);
			request.setAttribute("scope", scope);
			request.setAttribute("modelList", modelList);
			return mapping.findForward("showModel");
		} else if ("add".equals(task)) {
			ModelForm modelForm = (ModelForm) form;
			Model model = modelForm.getModel();
			String fileNameStr = "";
			try {
				// 保存上传的文件
				fileNameStr = FileSvc.safeFiles(form);
			} catch (Exception e) {
				e.printStackTrace();
			}
			model.setModelphoto(fileNameStr);
			ModelSvc.getInstance().save(model);
			return mapping.findForward("safeSuc");

		} else if ("delete".equals(task)) {
			String modelid = request.getParameter("modelid");
			FileSvc.deleteFile(ModelSvc.getInstance().findById(
					new Integer(modelid)).getModelphoto());
			ModelSvc.getInstance().deleteById(new Integer(modelid));
			request.setAttribute("page", "modelMgr.do?task=view&scope=all");
			return mapping.findForward("delSuc");
			// 编辑一个公告
		} else if ("edit".equals(task)) {
			String modelid = request.getParameter("modelid");
			Model model = ModelSvc.getInstance().findById(new Integer(modelid));
			ModelForm modelForm = (ModelForm) form;
			modelForm.setModel(model);
			String[] photoArray = model.getModelphoto().split(";");
			Collection<String> photos = new ArrayList<String>();
			if (!"".equals(model.getModelphoto())) {
				for (int i = 0; i < photoArray.length; i++) {
					photos.add("uploadfile/" + photoArray[i]);
				}
			}
			request.setAttribute("photos", photos);
			return mapping.findForward("edit");
			// 更新保存一个公告
		} else if ("update".equals(task)) {
			ModelForm modelForm = (ModelForm) form;
			Model model = ModelSvc.getInstance().findById(
					new Integer(modelForm.getModelid()));
			modelForm.buildModel(model);
			// 删除指定删除的若干个文件
			String newFiles = FileSvc.updateFile(model.getModelphoto(), request
					.getParameter("imgDelStr"));
			// 保存上传的文件
			String fileNameStr = "";
			try {
				// 保存上传的文件
				fileNameStr = FileSvc.safeFiles(form);
			} catch (Exception e) {
				e.printStackTrace();
			}
			model.setModelphoto(newFiles + fileNameStr);
			ModelSvc.getInstance().update(model);
			return mapping.findForward("safeSuc");
		} else if ("search".equals(task)) {
			// 未需求
		}
		return null;
	}
}