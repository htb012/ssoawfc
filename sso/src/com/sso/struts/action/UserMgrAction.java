/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.sso.struts.action;

import java.io.IOException;
import java.util.List;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import jp.co.pegatron.domain.model.User;
import jp.co.pegatron.hibernate.EnumUserState;

import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import com.sso.service.UserSvc;
import com.sso.struts.form.UserForm;
import com.ssoserver.common.pagination.Pagination;
import com.ssoserver.utils.GetPropMessage;

/**
 * 用户信息管理<br>
 * MyEclipse Struts Creation date: 10-16-2008
 * 
 * XDoclet definition:
 * 
 * @struts.action input="/register.jsp" scope="request" validate="true"
 * @struts.action-forward name="success" path="/register.jsp" redirect="true"
 * @struts.action-forward name="failure" path="/Error.jsp" redirect="true"
 * 
 */
public class UserMgrAction extends Action {

	public UserMgrAction() {
	}

	/**
	 * Method execute
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		String task = request.getParameter("task");
		if ("view".equals(task)) {
			Pagination pagination = new Pagination();
			String hql = GetPropMessage.getUTF8Message("allUser");
			List userList = pagination.execute(UserSvc.getInstance(), hql,
					request, response);
			request.setAttribute("userList", userList);
			return mapping.findForward("viewUsers");
		} else if ("del".equals(task)) {
			String id = request.getParameter("id");
			if (id != null && !id.equals("")) {
				UserSvc.getInstance().deleteById(new Integer(id));
			}
			try {
				request.getRequestDispatcher("/userMgr.do?task=view").forward(
						request, response);
			} catch (ServletException e) {
				e.printStackTrace();
			} catch (IOException e) {
				e.printStackTrace();
			}
			return null;
		} else if ("modify".equals(task)) {
			String id = request.getParameter("id");
			User user = UserSvc.getInstance().findById(new Integer(id));
			UserForm userForm = (UserForm) form;
			userForm.setUser(user);
			userForm.setTask("update");
			return mapping.findForward("modify");
		} else if ("add".equals(task)) {
			UserForm userForm = (UserForm) form;
			User user = userForm.getUser();
			user.setState(EnumUserState.outLine);
			UserSvc.getInstance().save(user);
			userForm.clear();
			return mapping.findForward("success");
		} else if ("update".equals(task)) {
			UserForm userForm = (UserForm) form;
			User user = UserSvc.getInstance().findById(
					new Integer(userForm.getUserid()));
			userForm.buildUser(user);
			UserSvc.getInstance().update(user);
			return mapping.findForward("success");
		}
		return null;
	}
}