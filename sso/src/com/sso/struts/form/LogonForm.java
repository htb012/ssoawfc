package com.sso.struts.form;

/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */

import java.rmi.RemoteException;

import javax.servlet.http.HttpServletRequest;

import jp.co.pegatron.hibernate.EnumUserState;

import org.apache.struts.action.ActionErrors;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessage;
import org.apache.struts.validator.ValidatorForm;
import com.ssoserver.business.userMgr.UserMgr;
import com.ssoserver.common.rmi.UserMgrFactory;
import com.ssoserver.utils.GetPropMessage;

/**
 * MyEclipse Struts Creation date: 11-24-2008
 *
 * XDoclet definition:
 *
 * @struts.form name="Login"
 */
public class LogonForm extends ValidatorForm {
	private String task;
	private String username;

	private String password;

	private String validateCode;

	private UserMgr userMgr;

	public LogonForm() {
		init();
	}

	public void init() {
		userMgr = UserMgrFactory.getUserMgr();
	}

	public String getUsername() {
		return username;
	}

	public void setUsername(String username) {
		this.username = username;
	}

	/**
	 * @return the password
	 */
	public String getPassword() {
		return password;
	}

	/**
	 * @param password
	 *            the password to set
	 */
	public void setPassword(String password) {
		this.password = password;
	}

	/**
	 * @return the validateCode
	 */
	public String getValidateCode() {
		return validateCode;
	}

	/**
	 * @param validateCode
	 *            the validateCode to set
	 */
	public void setValidateCode(String validateCode) {
		this.validateCode = validateCode;
	}

	/**
	 * @return the task
	 */
	public String getTask() {
		return task;
	}

	/**
	 * @param task
	 *            the task to set
	 */
	public void setTask(String task) {
		this.task = task;
	}

	/**
	 * Method validate
	 *
	 * @param mapping
	 * @param request
	 * @return ActionErrors
	 */
	public ActionErrors validate(ActionMapping mapping,
			HttpServletRequest request) {
		if ("logon".equals(task)) {
			ActionErrors errors = new ActionErrors();
			String useValidateCode = GetPropMessage
					.getMessage("useValidateCode");
			if ("true".equals(useValidateCode) || "1".equals(useValidateCode)) {
				if (validateCode == null
						|| !request.getSession()
								.getAttribute("forValideteCode").equals(
										validateCode)) {
					errors.add("validateCode", new ActionMessage(
							"logonForm.vcErr", ""));
				}
			}

			if (username == null || "".equals(username)) {
				errors.add("username", new ActionMessage("logonForm.unErr",
						""));
			}

			if (password == null || "".equals(password)) {
				errors.add("password", new ActionMessage("logonForm.psErr",
						""));
			}

			try {
				if (userMgr.login(request.getSession().getId(), username,
						password)) {
					request.getSession().setAttribute(
							EnumUserState.onLine.toString(), true);
					request.getSession().setAttribute("username", username);
				} else {
					errors.add(ActionErrors.GLOBAL_MESSAGE, new ActionMessage(
							"logonForm.logonErr", "ログインに失敗しました。ユーザーID、パスワードをお確かめください。"));
				}
			} catch (RemoteException e) {
				e.printStackTrace();
			}
			return errors.isEmpty() ? null : errors;
		} else {
			return null;
		}
	}

	/**
	 * Method reset
	 *
	 * @param mapping
	 * @param request
	 */
	public void reset(ActionMapping mapping, HttpServletRequest request) {
		this.clear();
	}

	public void clear() {
		username = null;
		password = null;
		validateCode = null;
	}
}