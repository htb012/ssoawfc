/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.sso.struts.action;

import java.io.IOException;
import java.util.List;

import javax.servlet.ServletException;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import jp.co.pegatron.domain.model.Metaauthority;
import jp.co.pegatron.domain.model.Resource;

import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import com.sso.service.MetaauthSvc;
import com.sso.service.ResourceSvc;
import com.sso.struts.form.MetaauthorityForm;
import com.sso.struts.form.ResourceForm;
import com.ssoserver.common.pagination.Pagination;
import com.ssoserver.utils.GetPropMessage;

/**
 * MyEclipse Struts Creation date: 04-26-2009
 * 
 * XDoclet definition:
 * 
 * @struts.action path="/resource" name="resourceForm"
 *                input="/resource/resource.jsp" scope="request" validate="true"
 */
public class MetaauthMgrAction extends Action {
	/*
	 * Generated Methods
	 */

	/**
	 * Method execute
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		String task = request.getParameter("task");
		if ("view".equals(task)) {
			Pagination pagination = new Pagination();
			String scope = request.getParameter("scope");
			List metaauthList = null;
			String viewHQLStr;
			if ("all".equals(scope)) {
				viewHQLStr = GetPropMessage.getUTF8Message("allMetaauth");
			} else {
				viewHQLStr = GetPropMessage.getUTF8Message("allMetaauth");
			}
			metaauthList = pagination.execute(MetaauthSvc.getIntance(),
					viewHQLStr, request, response);
			request.setAttribute("scope", scope);
			request.setAttribute("metaauthList", metaauthList);
			return mapping.findForward("view");
		} else if ("add".equals(task)) {
			MetaauthorityForm metaauthForm = (MetaauthorityForm) form;
			Metaauthority metaauth = metaauthForm.getMetaauth();
			MetaauthSvc.getIntance().save(metaauth);
			return mapping.findForward("safeSuc");

		} else if ("delete".equals(task)) {
			String metaauthid = request.getParameter("metaauthid");
			MetaauthSvc.getIntance().deleteById(new Integer(metaauthid));
			try {
				request.getRequestDispatcher("/metaauthMgr.do?task=view")
						.forward(request, response);
			} catch (ServletException e) {
				e.printStackTrace();
			} catch (IOException e) {
				e.printStackTrace();
			}
			return null;
			// 编辑一个公告
		} else if ("edit".equals(task)) {
			String metaauthid = request.getParameter("metaauthid");
			Metaauthority metaauth = MetaauthSvc.getIntance().findById(
					new Integer(metaauthid));
			MetaauthorityForm metaauthForm = (MetaauthorityForm) form;
			metaauthForm.setMetaauth(metaauth);
			return mapping.findForward("edit");
			// 更新保存一个公告
		} else if ("update".equals(task)) {
			MetaauthorityForm metaauthForm = (MetaauthorityForm) form;
			Metaauthority metaauth = MetaauthSvc.getIntance().findById(
					new Integer(metaauthForm.getMetaauthid()));
			metaauthForm.buildMetaauth(metaauth);
			MetaauthSvc.getIntance().update(metaauth);
			return mapping.findForward("safeSuc");
		} else if ("search".equals(task)) {
			// 未需求
		}
		return null;
	}
}