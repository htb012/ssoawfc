/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package jp.co.pegatron.struts.action;

import java.io.IOException;
import java.rmi.RemoteException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import jp.co.pegatron.common.FileSvc;
import jp.co.pegatron.domain.model.Customer;
import jp.co.pegatron.domain.model.Repairorder;
import jp.co.pegatron.domain.model.User;
import jp.co.pegatron.hibernate.EnumRepairOrderState;
import jp.co.pegatron.service.AgentSvc;
import jp.co.pegatron.service.CustomerSvc;
import jp.co.pegatron.service.ModelSvc;
import jp.co.pegatron.service.RepairOrderSvc;
import jp.co.pegatron.struts.form.RepairorderForm;

import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import com.ssoserver.business.userMgr.UserMgr;
import com.ssoserver.common.pagination.Pagination;
import com.ssoserver.common.rmi.UserMgrFactory;
import com.ssoserver.utils.GetPropMessage;
import com.ssoserver.utils.HqlFactory;

/**
 * MyEclipse Struts Creation date: 02-15-2010
 * 
 * XDoclet definition:
 * 
 * @struts.action validate="false"
 * @struts.action-forward name="showOrder" path="/systemRepair/showOrder.jsp"
 * @struts.action-forward name="particular" path="/systemRepair/particular.jsp"
 * @struts.action-forward name="add" path="/systemRepair/add.jsp"
 * @struts.action-forward name="safeSuc" path="/common/safeSuccess.jsp"
 * @struts.action-forward name="contact" path="/systemRepair/contact.jsp"
 */
public class RepairOrderMgrAction extends Action {

	/*
	 * Generated Methods
	 */

	public RepairOrderMgrAction() {

	}

	/**
	 * Method execute
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		String task = request.getParameter("task");
		// 查询记录
		if ("view".equals(task)) {
			Pagination pagination = new Pagination();
			String scope = request.getParameter("scope");
			List repairOrderList = null;
			String viewHQLStr;
			if ("repairer".equals(scope)) {
				viewHQLStr = GetPropMessage.getUTF8Message("repairerRepOrd");
			} else if ("finish".equals(scope)) {
				viewHQLStr = GetPropMessage.getUTF8Message("finishedRepOrd");
			} else if ("untreated".equals(scope)) {
				viewHQLStr = GetPropMessage.getUTF8Message("untreatedRepOrd");
			} else if ("treating".equals(scope)) {
				viewHQLStr = GetPropMessage.getUTF8Message("treatingRepOrd");
			} else if ("treated".equals(scope)) {
				viewHQLStr = GetPropMessage.getUTF8Message("treatedRepOrd");
			} else if ("all".equals(scope)) {
				viewHQLStr = GetPropMessage.getUTF8Message("allRepOrdSel");
			} else {
				viewHQLStr = GetPropMessage.getUTF8Message("allRepOrdSel");
			}
			repairOrderList = pagination.execute(RepairOrderSvc.getInstance(),
					viewHQLStr, request, response);
			request.setAttribute("repairOrderList", repairOrderList);
			String oldScope = request.getParameter("oldScope");
			if (oldScope == null || "".equals(oldScope)) {
				oldScope = scope;
			}
			request.setAttribute("oldScope", oldScope);
			request.setAttribute("scope", scope);
			return mapping.findForward("showOrder");
			// 显示详细页面
		} else if ("particular".equals(task)) {
			String id = request.getParameter("id");
			Repairorder order = RepairOrderSvc.getInstance().findById(
					new Integer(id));
			RepairorderForm orderForm = (RepairorderForm) form;
			orderForm.setRepairorderFrom(order);

			String[] photoArray = order.getPhoto().split(";");
			Collection<String> photos = new ArrayList<String>();
			if (!"".equals(order.getPhoto())) {
				for (int i = 0; i < photoArray.length; i++) {
					photos.add("uploadfile/" + photoArray[i]);
				}
			}
			request.setAttribute("validate", order.getValidate());
			request.setAttribute("photos", photos);
			request.setAttribute("agents", AgentSvc.getInstance().findAll());
			request.setAttribute("models", ModelSvc.getInstance().findAll());
			return mapping.findForward("particular");
			// 在创建一个维修单前的准备动作
		} else if ("prepadd".equals(task)) {
			request.setAttribute("agents", AgentSvc.getInstance().findAll());
			request.setAttribute("models", ModelSvc.getInstance().findAll());
			return mapping.findForward("add");
			// 删除一个维修单
		} else if ("delete".equals(task)) {
			String id = request.getParameter("id");
			FileSvc.deleteFile(RepairOrderSvc.getInstance().findById(
					new Integer(id)).getPhoto());
			RepairOrderSvc.getInstance().delteById(new Integer(id));
			try {
				request.getRequestDispatcher("/orderMgr.do?task=view").forward(
						request, response);
			} catch (ServletException e) {
				e.printStackTrace();
			} catch (IOException e) {
				e.printStackTrace();
			}
			return null;
			// 添加一个新的维修订单
		} else if ("add".equals(task)) {
			RepairorderForm repairorderForm = (RepairorderForm) form;
			Repairorder repairorder = repairorderForm.getRepairorder();
			String fileNameStr = "";
			try {
				// 保存上传的文件
				fileNameStr = FileSvc.safeFiles(form);
			} catch (Exception e) {
				e.printStackTrace();
			}
			repairorder.setPhoto(fileNameStr);
			repairorder.setStartdate(new Date());
			String secKey = request.getSession().getAttribute(UserMgr.SECKEY)
					.toString();
			User user = null;
			try {
				user = UserMgrFactory.getUserMgr().getCurrentUser(secKey);
			} catch (RemoteException e) {
				e.printStackTrace();
			}
			repairorder.setUser(user);
			repairorder.setRepairorderstate(EnumRepairOrderState.登録済み);
			if (repairorder.getIsagentrepair() == 0) {
				Customer customer = new Customer(repairorderForm
						.getCustomername(), "");
				CustomerSvc.getInstance().save(customer);
				repairorder.setCustomer(customer);
			}
			RepairOrderSvc.getInstance().save(repairorder);
			request.setAttribute("page", "orderMgr.do?task=view");
			return mapping.findForward("loadPage");
			// 更新一条新的维修订单
		} else if ("update".equals(task)) {

			RepairorderForm repairorderForm = (RepairorderForm) form;
			Repairorder repairorder = RepairOrderSvc.getInstance().findById(
					repairorderForm.getRepairorderid());
			repairorderForm.buildRepairorder(repairorder);
			// 删除指定删除的若干个文件
			String newFiles = FileSvc.updateFile(repairorder.getPhoto(),
					request.getParameter("imgDelStr"));
			// 保存上传的文件
			String fileNameStr = "";
			try {
				// 保存上传的文件
				fileNameStr = FileSvc.safeFiles(form);
			} catch (Exception e) {
				e.printStackTrace();
			}
			repairorder.setPhoto(newFiles + fileNameStr);
			repairorder.setRepairorderstate(EnumRepairOrderState.更新済み);
			RepairOrderSvc.getInstance().update(repairorder);
			if (repairorder.getIsagentrepair() == 0) {
				CustomerSvc.getInstance().update(repairorder.getCustomer());
			}
			return mapping.findForward("safeSuc");
			// 搜索维修订单
		} else if ("search".equals(task)) {
			Map<String, String> paraMap = new HashMap<String, String>();
			paraMap.put("customer.customername", request.getParameter("cname"));
			paraMap.put("model.modelname", request.getParameter("modelname"));
			paraMap.put("repOrd.rmano", request.getParameter("rmano"));
			paraMap.put("repOrd.sn", request.getParameter("sno"));
			String queryString = HqlFactory.getInstance().buildSearchHql(
					"repOrdSearch", paraMap);
			Pagination pagination = new Pagination();
			List repairOrderList = pagination.execute(RepairOrderSvc
					.getInstance(), queryString, request, response);
			request.setAttribute("repairOrderList", repairOrderList);
			return mapping.findForward("showOrder");
		}
		return null;
	}
}